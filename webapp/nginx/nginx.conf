worker_processes auto;

worker_rlimit_nofile 8192;
events {
    worker_connections 2048;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format ltsv "time:$time_local"
    "\thost:$remote_addr"
    "\tforwardedfor:$http_x_forwarded_for"
    "\treq:$request"
    "\tstatus:$status"
    "\tmethod:$request_method"
    "\turi:$request_uri"
    "\tsize:$body_bytes_sent"
    "\treferer:$http_referer"
    "\tua:$http_user_agent"
    "\treqtime:$request_time"
    "\tcache:$upstream_http_x_cache"
    "\truntime:$upstream_http_x_runtime"
    "\tapptime:$upstream_response_time"
    "\tvhost:$host";

    # access_log /var/log/nginx/access.log ltsv;
    # error_log /var/log/nginx/error.log;
    access_log off;
    error_log /dev/null crit;

    # ファイルのメタデータのキャッシュ
    # inactive=60s がデフォルト
    open_file_cache max=1000;
    open_file_cache_errors on;

    # sendfile (2) でファイルを返却
    # 動かないこともある
    sendfile on;
    # sendfile が有効の場合のみ
    # sending the response header and the beginning of a file in one packet
    tcp_nopush on;
    tcp_nodelay on;

    # 非同期 I/O
    # デフォルトのスレッドプールは十分大きい
    aio threads;

    proxy_cache_path /var/cache/nginx keys_zone=CACHE:10m max_size=1g inactive=1d use_temp_path=off;

    proxy_request_buffering off;
    proxy_buffer_size 64k;

    keepalive_timeout 65;


    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server unix:/tmp/da.sock;
        keepalive 32;
        keepalive_requests 10000;
    }

    server {
        listen 443 ssl http2;

        ssl_certificate /da/tls/fullchain1.pem;
        ssl_certificate_key /da/tls/privkey1.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1h;

        ssl_session_tickets on;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            gzip on;
            gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg image/svg+xml image/x-icon application/octet-stream;
            # Content-Length で判断
            gzip_min_length 1024;
            # 無効化する UA
            gzip_disable "msie6";
        }

        location /_next/static {
            alias /usr/src/frontend/.next/static;
            try_files $uri =404;
            add_header Cache-Control "public";
            expires 1d;

            gzip on;
            gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg image/svg+xml image/x-icon application/octet-stream;
            # Content-Length で判断
            gzip_min_length 1024;
            # 無効化する UA
            gzip_disable "msie6"
        }

        location /api/user_image/ {
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            expires 1d;
            proxy_set_header Cache-Control "public";
        }

        location /api/ {
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
