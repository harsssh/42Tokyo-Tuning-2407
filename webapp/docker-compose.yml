services:
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    networks:
      - webapp-network
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - user-icons:/usr/local/bin/images
      - mysql-socket:/var/run/mysqld
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8080/api/health_check", "-X", "GET"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 600s
    entrypoint: ["sh", "-c", "./backend"]

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    environment:
      - API_BASE_URL=https://${HOSTNAME}.ftt2407.dabaas.net
    ports:
      - "3000:3000"
    networks:
      - webapp-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - frontend-files:/usr/src/frontend
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:3000/health-check", "-X", "GET"]
      interval: 5s
      timeout: 10s
      retries: 10
      start_period: 30s
    entrypoint: ["sh", "-c", "yarn start"]

  db:
    container_name: mysql
    build:
      context: ./mysql
      dockerfile: Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: 42Tokyo-db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf.d:/etc/mysql/conf.d
      - ./mysql/migration:/etc/mysql/migration
      - mysql-logs:/var/log/mysql
      - mysql-socket:/var/run/mysqld
    networks:
      - webapp-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 30s
      retries: 10
      start_period: 300s

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /da/tls:/da/tls:ro
      - nginx-logs:/var/log/nginx
      - frontend-files:/usr/src/frontend
      - user-icons:/usr/local/bin/images
    tmpfs:
      - /var/cache/nginx
    networks:
      - webapp-network
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

  ### 以下、計測用 ###
  pprotein:
    container_name: pprotein
    restart: unless-stopped
    build:
      context: pprotein
      dockerfile: Dockerfile
    ports:
      - 9000:9000
    volumes:
      - ./pprotein/data:/opt/pprotein/data
      - nginx-logs:/var/log/nginx
      - mysql-logs:/var/log/mysql

  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter
  #   container_name: nginx-exporter
  #   restart: unless-stopped
  #   command: ["-nginx.scrape-uri=http://nginx/nginx_status"]
  #   networks:
  #     - webapp-network

  # mysql-exporter:
  #   image: prom/mysqld-exporter
  #   container_name: mysql-exporter
  #   restart: unless-stopped
  #   environment:
  #     MYSQLD_EXPORTER_PASSWORD: password
  #   command:
  #     - "--mysqld.username=user"
  #     - "--mysqld.address=db:3306"
  #     - "--no-collect.slave_status"
  #   networks:
  #     - webapp-network

  # node-exporter:
  #   image: quay.io/prometheus/node-exporter:latest
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   network_mode: host
  #   pid: host
  #   volumes:
  #     - "/:/host:ro,rslave"
  #   command:
  #     - "--path.rootfs=/host"

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   volumes:
  #     - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - webapp-network

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   restart: unless-stopped
  #   ports:
  #     - "8000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/dashboards:/var/lib/grafana/dashboards
  #   networks:
  #     - webapp-network

networks:
  webapp-network:
    external: true

volumes:
  mysql-socket:
  user-icons: # external でもいいかも
  frontend-files:
  nginx-logs:
    external: true
  mysql-logs:
    external: true
  grafana-storage: